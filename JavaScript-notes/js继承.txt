1、类（构造）继承：在函数对象内调用父类的构造函数，使得自身获得父类的方法和属性。call和apply方法为类式继承提供了支持。通过改变this的作用环境，使得子类本身具有父类的各种属性。
        
 var father = function() {
    this.age = 52;
    this.say = function() {
    alert('hello i am '+ this.name ' and i am '+this.age + 'years old');
       }
}
	var child = function() {
              this.name = 'bill';
              father.call(this);
              }
         var man = new child();
         man.say();

2、原型继承：继承不在对象本身，而在对象的原型上（prototype）。每一个对象都有原型，在浏览器中它体现在一个隐藏的__proto__属性上。在一些现代浏览器中你可以更改它们。当一个对象需要调用某个方法时，它回去最近的原型上查找该方法，如果没有找到，它会再次往下继续查找。这样逐级查找，一直找到了要找的方法。 这些查找的原型构成了该对象的原型链条。原型最后指向的是null。我们说的原型继承，就是将父对像的方法给子类的原型。子类的构造函数中不拥有这些方法和属性。
                 var father = function() {}
                 father.prototype.a = function() {}
                 var child = function(){}
                //开始继承
                child.prototype = new father();
                var man = new child();
                man.a();

可以看到逐级的关系child->object（father实例化的对象）->father。child是通过中间层继承了father的原型上的东西的。但是为什么中间还有一层object呢，为什么不把child.prototype = father.prototype。答案是如果这样做child和father就没有区别了。在prototype中有个constructor属性，指向的是构造函数。按照正常的情况我们要把constructor的值改回来指向child的构造函数。但如果直接把father.prototype赋值给child.prototype，那么constructor不清楚指向谁。

对比

和原型对比起来，构造函数（类）式继承有什么不一样呢？首先，构造函数继承的方法都会存在父对象之中，每一次实例，都回将funciton保存在内存中，这样的做法毫无以为会带来性能上的问题。其次类式继承是不可变的。在运行时，无法修改或者添加新的方法，这种方式是一种固步自封的死方法。而原型继承是可以通过改变原型链接而对子类进行修改的。另外就是类式继承不支持多重继承，而对于原型继承来说，你只需要写好extend对对象进行扩展即可。

3、组合模式：结合类继承和原型继承的各自优点来进行对父类的继承。用类式继承属性，而原型继承方法。这种模式避免了属性的公用，因为一般来说，每一个子类的属性都是私有的，而方法得到了统一。这种模式称为组合模式，也是继承类式常用到的一种方法。
            function father() {
                    this.a = 'father'  
        }
         father.prototype.b = function() {
                alert(this.a)
        }
        var child = function() {
                father.call(this)
        }
        child.prototype = new father();





事件{

        /*阻止事件冒泡*/
        function stopEvent(e){
                //阻止事件冒泡 
                if (e && e.stopPropagation) {//非IE  
                        e.stopPropagation();  
                }else {//IE  
                        window.event.cancelBubble = true;  
                } 
        }




产品经理首先把大致的效果图确定下来

吕燕然 2015/12/4 16:17:59
然后交给ui

吕燕然 2015/12/4 16:18:55
ui设计好后  交给前端  前端做静态页面和特效  做完后交给后台  后台写交互传数据

吕燕然 2015/12/4 16:19:11
完成后  测试的开始测试  没问题就上线