1、对象都是同传递引用来传递的（也就是说，对象都是通过传递地址来传递的，一个对象要是相等，那么只需要它的地址相同即可）也就是说，我们用原型来创建新对象时，并没有那份属于自己独立的原型副本，进一步来说就是我们如果修该原型，那么与之相关的对象都会发生变化。

2、JS引擎查找对象属性的过程：自身属性――>创建该对象的构造器函数的原型属性（对象.constructor.prtotype）


3、每个对象都有自己的构造器属性，该构造器属性值就是一个对象（构造器对象），该构造器对象指的就是创建该对象时的那个对象。

4、当我们在重写某个对象的prototype时，应该重置一下相应的constructor属性：例如：Dog.prototype.constructor=Dog; 不然容易出现__proto__指向不明的错误


如果我们用一个构造器函数，实例化出来（new）一个新的对象，那么这个实例是没有prototype属性的. 只有它的构造器才拥有prototype，这也就是能在原型上继承的原因。属性prototype是在函数作为构造函数时才有的，才使用用的。???