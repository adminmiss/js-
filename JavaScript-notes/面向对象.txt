面向对象：只关注对象的功能，只关注怎么用，不关心它内部的原理

特点：1）抽象：只关注主要的特征，跟问题相关的特征抽出来
      2）封装：看不到里面的东西，用好表面的功能就行
      3）继承：从父类上继承出一些方法和属性，子类，又有一些特殊的特性。――多态：――多重继承


变量：自由的，不属于任何人        函数：自由的 ，不属于任何人
属性：属于一个对象               方法：属于对象
变量和属性其实是一回事           函数和方法也是一回事

this   ：当前发生事件的对象
       ：当前的方法属于谁，this就是谁（精确）,谁触发了这个方法，那么这个this就指向谁。

object ：空白对象，几乎没有什么属性方法

构造函数：也叫工厂模式
工厂模式：原料――>加工――>出厂（用一个函数将所需功能包起来
不足：1）没有new
      2）函数得重复定义（性能低、资源浪费）
      3）方法无法共享（两个对象即使方法体完全相同，但是它们都不同）

当加了new的时候，系统会偷偷的创建一个新的对象，而此时的this则指向的是新对象

原型：

例如：var arr=new Array(1,2,4,5)
类：模子              Array
对象：产品（成品）     arr

面向对象程序：构造函数里去加属性，原型上去加方法
（混合方式）

构造函数的命名：首字母大写

把面向过程的程序改为面向对象的形式的方法步骤：

原则：不能有函数的嵌套、但可以有全局变量

方法：onload ――> 构造函数
      全局变量――>属性
      函数――――>方法
      再改错（this、事件、闭包、传参）


JSON 来实现面向对象编程：

命名空间：就是在json中嵌套json  在公司里，把同一类的方法，包在一起

继承：1）属性：call    2）方法


程序所在的宿主环境一般都会为其提供一个全局变量，而所谓的全局变量其实都只不过是该对象得而属性罢了。

例如：宿主环境是WEB浏览器时，它所提供的全局对象就是window  也就是说全局变量就是window的一个自定义属性

例如：var x=13;
      alert(window.x);  //x就是window的一个自定义属性
  
当申明了一个构造函数时：但我们要用时却没有用new 出来一个新对象

此时this所代表的是window对象。
例如：function person(name){
                this.name=name;
                } 
        var y=person("zhoufei");   //此时this指的是window
         alert(window.name);       //zhoufei

function person(name){
                this.name=name;
                } 
        var y=person("zhoufei");   //此时this指的是window
         alert(y.name);       //name is undefined

function person(name){
                this.name=name;
                } 
        var y=new person("zhoufei");   //此时this指的是y
         alert(y.name);       //zhoufei



如果使用了new 来调用时，此时是一个新对象 this也会自动指向该对象

当构造器函数返回一个对象时，此时的this便不在指向该构造器的对象了，而是指向返回的那个对象。但当返回的不是函数时，this照常

例如：function f(){this.a=1;return{b:2};}
      var f1=new f();
        alert(f1.a)    //undefined
        alert(f1.b)    //2

空对象var o={};
      var o=new object()

也有一些属性和方法（继承与object对象 例如构造器属性 ：contractor
                                 方法：        toString()
                                               valueof()

//call继承：call(对象，参数)

var some_obj={
        name:"zhoufei",
        say:function(who){
                       return 'Haya '+who+", I am "+this.name;
                        }

                   some_obj.say('Duede')

                   //"Haya Duede, I am a zhoufei"


                    my_obj={
                     name:'Scripting guru'};
//call继承           
some_obj.say.call(my_obj,"Dude");

                     //" Haya Dude, I am a Scripting guru"


apply：继承：（与call差不多只是第二个参数是一个数组来表示）


混合模式：因为同一个类（构造函数）的多个对象
――属性值不同――工厂模式
――方法实现共享――原型模式



var str='{"name":"wangsan","age":19,"sex":"男","sdept":"cs"}';
  var str_json=eval("("+str+")");
   document.write("name:"+str_json.name+"<br>");
   document.write("age:"+str_json.age+"<br>");
   document.write("sex:"+str_json.sex+"<br>");
   document.write("sdept:"+str_json.sdept+"<br>");

注意：JSON字符串转换为JSON对象用eval()

格式：var str_json=eval("("+str+")");

注意：从后台取来的json格式字符串，不能有空格。

json.prese()

先创建页面的所有DOM节点（在这过程中遇到JS就执行）  

然后再显示出来
